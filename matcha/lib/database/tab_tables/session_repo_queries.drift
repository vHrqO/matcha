import 'tab_tables.drift';

------ utils
getLatestAddId: SELECT last_insert_rowid() AS latest_add_id;


getSessionName: SELECT name FROM session WHERE id = :sessionId;


getSessionId:
SELECT session_id
FROM tabs_item
WHERE id = :tabsItemId;


getGroupId:
SELECT group_id
FROM tab
WHERE id = :tabsItemId;


------ TabsItem
hasTabsItem:
SELECT EXISTS (
    --- '1' as placeholder
    SELECT 1 FROM tabs_item WHERE id = :tabsItemId
);


addTabsItem:
INSERT INTO tabs_item (session_id, position, is_group, is_inside_group, title)
VALUES
  (
    :sessionId,
    CASE
      WHEN :isInsideGroup = true THEN NULL

      -- '-1' for zero-based index
      ELSE (
        SELECT
          IFNULL(MAX(position), -1) + 1
        FROM
          tabs_item
        WHERE
          session_id = :sessionId
          AND is_inside_group = false
      )
    END,
    :isGroup,
    :isInsideGroup,
    :title
  );


updateTabsItem:
UPDATE tabs_item
SET title = :title
WHERE id = :tabsItemId;


removeTabsItem:
-- ON DELETE CASCADE
-- auto remove tab , tab_group, tabs_item_tag
-- need refresh Position after delete
DELETE FROM tabs_item
WHERE id = :tabsItemId;


-- removeAllTabsItem:
-- DELETE FROM tabs_item
-- WHERE id IN :tabsItemIdList;


getAllOutGroupTabsItems:
SELECT
    tabs_item.*,
    tab.url,
    (
      SELECT GROUP_CONCAT(tag)
      FROM tabs_item_tag
      WHERE tabs_item_tag.tabs_item_id = tabs_item.id
      ORDER BY tag
    ) AS tagList
FROM tabs_item
LEFT JOIN tab ON tabs_item.id = tab.id
WHERE tabs_item.session_id = :sessionId
  AND tabs_item.is_inside_group = FALSE
ORDER BY tabs_item.position;


getAllInGroupTabsItems:
SELECT
    tabs_item.id,
    tabs_item.session_id,
    tabs_item.is_group,
    tabs_item.is_inside_group,
    tabs_item.title,
    tab.url,
    tab.position,
    (
      SELECT GROUP_CONCAT(tag)
      FROM tabs_item_tag
      WHERE tabs_item_tag.tabs_item_id = tabs_item.id
      ORDER BY tag
    ) AS tagList
FROM tabs_item
JOIN tab ON tabs_item.id = tab.id
WHERE tabs_item.session_id = :sessionId
  AND tabs_item.is_inside_group = TRUE
  AND tab.group_id = :groupId
ORDER BY tab.position;

------


------ Tab
addTab:
INSERT INTO tab (id, url)
VALUES (
    :tabsItemId,
    :url
);


addTabInGroup:
INSERT INTO tab (
  id,         
  group_id,   
  position,   
  url
)
VALUES
  (
    :tabsItemId,
    :groupId,

    -- '-1' for zero-based index
    (
      SELECT
        IFNULL(MAX(position), -1) + 1
      FROM
        tab
      WHERE
        group_id = :groupId
    ),
    :url
  );


updateTab: 
UPDATE tab
SET url = :url
WHERE id = :tabsItemId;

------


------ TabGroup
addTabGroup:
INSERT INTO tab_group (id ,group_color)
VALUES (:tabsItemId, :groupColor);


updateTabGroup:
UPDATE tab_group
SET group_color = :groupColor
WHERE id = :groupId;

------


------ Tag
addTag:
INSERT OR IGNORE INTO tabs_item_tag (tabs_item_id, tag)
VALUES (
    :tabsItemId,
    :tag
);


removeTag:
DELETE FROM tabs_item_tag
WHERE
  tabs_item_id = :tabsItemId
  AND tag         = :tag;


getAllTags:
SELECT tag
FROM tabs_item_tag
WHERE tabs_item_id = :tabsItemId;


getAllDistinctTags:
SELECT DISTINCT tag FROM tabs_item_tag;

------


------ refresh Position
refreshPositionTabsItem:
WITH Ordered AS (
  SELECT
    id,
    ROW_NUMBER() OVER (ORDER BY position) - 1 AS new_pos
  FROM tabs_item
  WHERE session_id = :sessionId
    AND is_inside_group = FALSE
)
UPDATE tabs_item
SET position = (
  SELECT new_pos FROM Ordered WHERE Ordered.id = tabs_item.id
)
WHERE session_id = :sessionId
  AND is_inside_group = FALSE;


refreshPositionTabInGroup:
WITH Ordered AS (
  SELECT
    id,
    ROW_NUMBER() OVER (ORDER BY position) - 1 AS new_pos
  FROM tab
  WHERE group_id = :groupId
)
UPDATE tab
SET position = (
  SELECT new_pos
  FROM Ordered
  WHERE Ordered.id = tab.id
)
WHERE group_id = :groupId;

------ 


------ Reorder the tabs_item
isTabsItemPositionUnique: 
SELECT NOT EXISTS (
  SELECT 1
  FROM tabs_item
  WHERE session_id = :sessionId
    AND is_inside_group = FALSE
  GROUP BY position
  HAVING COUNT(*) > 1
) AS is_unique;


-- moving down (old < new)
reorderTabsItem_shiftDown:
UPDATE tabs_item
SET position = CASE
    WHEN position = :oldIndex THEN :newIndex
    ELSE position - 1
END
WHERE 
  session_id = :sessionId
  AND is_inside_group = FALSE
  AND position >= :oldIndex
  AND position <= :newIndex;

-- moving up (old > new)
reorderTabsItem_shiftUp:
UPDATE tabs_item
SET position = CASE
    WHEN position = :oldIndex THEN :newIndex
    ELSE position + 1
END
WHERE 
  session_id = :sessionId
  AND is_inside_group = FALSE
  AND position >= :newIndex
  AND position <= :oldIndex;

------ 


------ Reorder tabs in a group
isTabInGroupPositionUnique: 
SELECT NOT EXISTS (
  SELECT 1
  FROM tab
  WHERE group_id = :groupId
  GROUP BY position
  HAVING COUNT(*) > 1
) AS is_unique;

-- moving down (old < new)
reorderTabIn_shiftDown:
UPDATE tab
  SET position = CASE
       WHEN position =  :oldIndex THEN :newIndex
       ELSE position - 1
     END
WHERE 
  group_id = :groupId
  AND position >= :oldIndex
  AND position <= :newIndex;

-- moving up (old > new)
reorderTabIn_shiftUp:
UPDATE tab
  SET position = CASE
       WHEN position = :oldIndex THEN :newIndex
       ELSE position + 1
     END
WHERE 
  group_id = :groupId
  AND position >= :newIndex
  AND position <= :oldIndex;

------ 


------ Move
-- moveTabInGroup
moveTabInGroup_removeFromOut:
UPDATE tabs_item
SET 
    position = NULL,
    is_inside_group = TRUE
WHERE id = :tabsItemId;

moveTabInGroup_AddToGroup:
UPDATE tab
SET
  group_id = :groupId,
  position = (
    SELECT IFNULL(MAX(position), -1) + 1 
    FROM tab
    WHERE group_id = :groupId
  )
WHERE id = :tabsItemId;
-- 


-- moveTabOutGroup
moveTabOutGroup_removeFromGroup:
UPDATE tab
SET
  group_id = NULL,
  position = NULL
WHERE id = :tabsItemId;

moveTabOutGroup_AddToOut:
UPDATE
  tabs_item
SET
  is_inside_group = FALSE,

  -- '-1' for zero-based index
  position = (
    SELECT
      IFNULL(MAX(position), -1) + 1
    FROM
      tabs_item
    WHERE
      session_id = :sessionId
      AND is_inside_group = FALSE
  )
WHERE
  id = :tabsItemId;
-- 


moveToSession:
UPDATE tabs_item
SET
  session_id = :newSessionId,

  -- '-1' for zero-based index
  position = (
    SELECT IFNULL(MAX(position), -1) + 1
    FROM tabs_item
    WHERE session_id = :newSessionId
      AND is_inside_group = FALSE
  )
WHERE id = :tabsItemId;


moveToSession_TabInGroup:
UPDATE tabs_item
SET
  session_id = :newSessionId
WHERE id IN (
  SELECT id FROM tab WHERE group_id = :groupId
);

------ 




